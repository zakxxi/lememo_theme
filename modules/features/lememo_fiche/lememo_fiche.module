<?php
/**
 * @file
 * Code for the lememo_fiche feature.
 */

include_once 'lememo_fiche.features.inc';

/**
 * Implements hook_form_alter().
 *
 * Clean the contact form and add some information that may be needed when
 * sending the mail.
 */
function lememo_fiche_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['subject']['#required'] = false;
  $form['subject']['#access'] = false;
  $form['copy']['#access'] = false;
  $form['actions']['submit']['#value'] = 'Envoyer une demande de devis';
  $form['actions']['submit']['#attributes'] = array('class' => array('button expand'));
  array_push($form['#submit'], 'lememo_fiche_form_contact_site_form_submit');
}

function lememo_fiche_form_contact_site_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = $form_state['complete form']['#action'];
}

/**
 * Implements hook_mail_alter().
 */
function lememo_fiche_mail_alter(&$message) {
  if (($message['module'] == 'email') && ($message['id'] == 'email_contact')) {
    $site_mail = variable_get('site_mail', 'info@lememo.fr');
    $message['to'] .= '; ' . $site_mail;
  }
}

/**
 * Implements hook_block_info().
 *
 * Declare a block with the contact form.
 */
function lememo_fiche_block_info() {
  $blocks = array();

  if (module_exists('contact')) {
    $blocks['contact_site'] = array(
      'info' => t('Site-wide contact form'),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Create a block with the contact form.
 */
function lememo_fiche_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'contact_site':
      if (user_access('access site-wide contact form') && module_exists('contact')) {
        if (!flood_is_allowed('contact', variable_get('contact_hourly_threshold', 20))) {
          $content = t("You cannot send more than %number messages per hour. Please try again later.", array('%number' => variable_get('contact_hourly_threshold', 3)));
        }
        else {
          module_load_include('inc', 'contact', 'contact.pages');
          $content = drupal_get_form('contact_site_form');
        }

        $block['subject'] = '<none>';
        $block['content']['form'] = $content;
        return $block;
      }
      break;
  }
}

/**
 * Implements hook_ds_fields_info().
 * création d'un champ DS pour charger l'image de couverture dans un champ extra
 */
function lememo_fiche_ds_fields_info($entity_type) {
  $fields = array();

  $fields['node']['lememo_fiche_cover_image'] = array(
    'title' => t('Image de couverture'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_ds_field_cover_image',
  );

    $fields['node']['lememo_fiche_btn_coord'] = array(
    'title' => t('Bouton coordonnées'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_btn_coord',
  );

    $fields['node']['lememo_fiche_comment_counter'] = array(
    'title' => t('Nombre de commentaires'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_comment_counter',
  );

    $fields['node']['lememo_fiche_add_this'] = array(
    'title' => t('Bloc Add this'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_ds_field_add_this',
  );

    $fields['node']['lememo_fiche_legals'] = array(
    'title' => t('Bloc Mentions légales'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_legals',
  );

    $fields['node']['lememo_fiche_block_coord'] = array(
    'title' => t('Bloc coordonnées'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_block_coord',
  );

    $fields['node']['lememo_fiche_block_gallery'] = array(
    'title' => t('Bloc galerie'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_block_gallery',
  );

    $fields['node']['lememo_fiche_backtop_btn'] = array(
    'title' => t('Bouton retour haut'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'lememo_fiche_backtop_btn',
  );

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
  return;
} 

/**
 * Render the field cover_image.
 */
function lememo_fiche_ds_field_cover_image($field) {
  // récupère le champ
  $field_cover = $field['entity']->field_cover;
  // récupère l'URI de l'image
  $img_uri = $field_cover['und'][0]['uri'];
  $img_cover_url = image_style_url('cover', $img_uri);
  $output = '<div class="societe-cover-image" style="background: url(\'' . $img_cover_url  . '\') no-repeat center;"></div>';

return $output;
}

/**
 * Render the field btn_coord.
 */
function lememo_fiche_btn_coord($field) {
  $output = '<a href="#fiche_coord" class="button warning scrollto">Coordonnées</a>';

return $output;
}

/**
 * Render the field comment_counter
 */
function lememo_fiche_comment_counter($field) {
  $nb_comments = $field['entity']->comment_count;
  $output =  '<a href="#comments" class="comment_counter scrollto">Poster un avis</a>';
  if($nb_comments > 0){
  $output = '<a href="#comments" class="comment_counter scrollto">' . $nb_comments . ' avis</a>';
}
return $output;
}


/**
 * Render the field add_this.
 */
function lememo_fiche_ds_field_add_this($field) {
  $output = '<div class="addthis_sharing_toolbox"></div>';

return $output;
}

/**
 * Render the field block_legals.
 */
function lememo_fiche_legals($field) {
  $company = $field['entity']->title;
  $siret =   $field['entity']->field_siret['und'][0]['value'];
  $tva =   $field['entity']->field_siret['und'][0]['value'];
  $adress = lememo_fiche_make_adress($field);
  $output = '<div>
    <h2> Informations Légales </h2>
    <h3> Siège social </h3>
    <p>' . $adress . '</p>
    <h3> SIRET </h3> <p>'
    . $siret .
    '</p><h3> TVA Intra </h3> <p>'
    . $tva .
  '</p></div>';

return $output;
}


/**
 * Render the field block_coord.
 */
function lememo_fiche_block_coord($field) {
  $company = $field['entity']->title;
  $adress = lememo_fiche_make_adress($field);
  $tel1 = $field['entity']->field_phone_1['und'][0]['value'];
  $tel2 = $field['entity']->field_phone_2['und'][0]['value'];
  $output = '<div class="row"> <div id="fiche_coord" class="columns small-6 small-centered medium-3 medium-offset-1">
    <h2>' . $company . '</h2>
    <p>' . $adress . '</p>
    <p>Tél : ' . $tel1 . '<br/>
    Tél : ' . $tel2 . '</p>
    <a data-reveal-id="email-mail-popin" href="#email-mail-page-form" class="button warning">Contacter</a></div></div>' ;


return $output;
}

/**
 * Render the field block_gallery. // CUSTOM GALLERY
 */
function lememo_fiche_block_gallery($field) {
  $pictures = $field['entity']->field_pictures['und'];
  // compte le nombre d'images
  $pictures_nb = count($pictures);
  $output = NULL;
  // rendu de la galerie si il y'a des images
  if ($pictures_nb != 0) {
    // on parcours les images
    // pour les 2 premières
      if ($pictures_nb > 1){
            $output = $output . '<div class="fiche_gallery"><ul data-clearing>'; // on ouvre la liste
            for ($i = 0; $i < 2; $i++) {
              $img_uri = $pictures[$i]['uri'];
              $img_thumb1_url = image_style_url('gallery_thumb1', $img_uri);
              $img_original_url = file_create_url($img_uri);
              $output_thumb1 = '<li class = "gallery_thumb1"><a href="' . $img_original_url . '"><img src="' . $img_thumb1_url . '"></a></li>';
              $output = $output . $output_thumb1;
            }

        if ($pictures_nb > 2){
          // pour les 3 suivantes
            for ($i = 2; $i < $pictures_nb && $i < 5; $i++) {
              $img_uri = $pictures[$i]['uri'];
              $img_thumb2_url = image_style_url('gallery_thumb2', $img_uri);
              $img_original_url = file_create_url($img_uri);
              $output_thumb2 = '<li class = "gallery_thumb2"><a href="' . $img_original_url . '"><img src="' . $img_thumb2_url . '"></a></li>';
              $output = $output . $output_thumb2;
            }
                if ($pictures_nb <= 5){
                   $output = $output . '</ul></div>'; // on ferme la liste si le nombre d'image est inférieur à 5
                }
          }
               else {
                   $output = $output . '</ul></div>'; // on ferme la liste si le nombre d'image est égal à 2
                }

        if ($pictures_nb > 5){
              // pour les suivantes
            for ($i = 5; $i < $pictures_nb ; $i++) {
              $img_uri = $pictures[$i]['uri'];
              $img_thumb_url3 = image_style_url('gallery_thumb2', $img_uri);
              $img_original_url = file_create_url($img_uri);
              $output_nothumb = '<li class = "hide gallery_nothumb"><a href="' . $img_original_url . '"><img src="' . $img_thumb_url3 . '"></a></li>';
              $output = $output . $output_nothumb;
            }
            $output = $output . '</ul></div>'; // on ferme la liste
            // affichage du lien pour toute la galerie
            $output = $output . '<a class = "openclearing gallery_link" href="#" data-thumb-index="0">Voir toutes les photos</a>';
        }
      } else {
      // dans le cas ou une seule image
            $output = $output . '<ul data-clearing>';  // on ouvre la liste
            $img_uri = $pictures[0]['uri'];
            $img_thumb_url = image_style_url('gallery_thumb1', $img_uri);
            $img_original_url = file_create_url($img_uri);
            $output_thumb = '<li class = "gallery_thumb1"><a href="' . $img_original_url . '"><img src="' . $img_thumb_url . '"></a></li>';
            $output = $output . $output_thumb;
            $output = $output . '</ul>'; // on ferme la liste
}
  } else {
      // dans le cas ou pas d'images
      $output = NULL;
  }

return $output;
}

/**
 * Render the field backtop_btn
 */
function lememo_fiche_backtop_btn($field) {
  $output = '<div class="row"> <a href="#top" class="right scrollto">^</a></div>';
//    $output = '<a href="#fiche_coord" class="button warning scrollto">Coordonnées</a>';


return $output;
}


/**
 * Custom comments buttons & fields
 */
function lememo_fiche_form_comment_form_alter(&$form, &$form_state) {
  // Only show the save button if comment previews are optional or if we are
  // already previewing the submission.
 // $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'), 
   /* '#access' => ($comment->cid && user_access('administer comments')) || variable_get('comment_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_REQUIRED || isset($form_state['comment_preview']), */
    '#weight' => 20,
    '#attributes'=> array('class' => array('button small')),
  );
  $form['author']['homepage']['#access'] = FALSE;
}

/**
 * Custom contact form buttons and title /// WIP ///
 */
function lememo_fiche_form_email_mail_page_form_alter(&$form, &$form_state, $form_id) { 
  //dsm($form_id);  // print form ID to messages
 // dsm($form);  // pretty print array using Krumo to messages
 // $form['actions'] = array('#type' => 'actions');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Envoyer'),
    '#attributes'=> array('class' => array('button expand')),
  );

    $form['phone'] = array(
  '#type' => 'textfield',
  '#title' => t('Téléphone'),
  '#weight' => -10,
  '#prefix' => '<h2>Formulaire de contact</h2>', // Add markup before form item
);
  $form['name']['#required'] = FALSE;
  $form['name']['#access'] = FALSE;
  $form['subject']['#required'] = FALSE;
  $form['subject']['#access'] = FALSE;

}

/**
 * Function to concratenate adress
 */
function lememo_fiche_make_adress($field) {
  $street = $field['entity']->field_rows['und'][0]['value'];
  $cp = $field['entity']->field_code_postal['und'][0]['value'];
  $city = $field['entity']->field_city['und'][0]['value'];
  $country = $field['entity']->field_country['und'][0]['value'];
  $output = $street . '</br>' . $cp . ' ' . $city . ', ' . $country;

return $output;
}
